	.z80
	title	MSX-DOS 2 ROM   Copyright (1986)  IS Systems Ltd.
	subttl	Substitute for the dummy disk driver module

; In MSX-DOS 2.3x, this was a dummy disk driver module that simply returned errors when called.
; Now this contains code that redirects calls to the driver bank.

;-----------------------------------------------------------------------------
;
	INCLUDE	MACROS.INC
	INCLUDE	CONST.INC
;
;-----------------------------------------------------------------------------
;
$$DRIVE::
;
;       External Routines.
;
;	extrn	PROMPT,SETINT,PRVINT,GETSLOT,GETWRK,DIV16,ENASLT,XFER
;
;       External Variables.
;
;	extrn	$SECBUF,RAMAD0,RAMAD1,RAMAD2,RAMAD3,RAWFLG
;
;       Public Values.
;
	public	DEFDPB
;

	;*** This should be compiled at 781Fh


;-----------------------------------------------------------------------------
;
; Null message. The address of this message can be returned by
; the CHOICE routine in the disk driver when the device can't be formatted.

null_message:
	db	0

; "Single side/double side" message, can be used when driving
; a legacy MSX disk drive

	db	"1 - Single side",13,10
	db	"2 - Double side",13,10
	db	0

;-----------------------------------------------------------------------------
;
; Entries for direct calls.
; Calls to these addresses will be translated to calls to the DV_DIRECTx
; entry points in the driver bank.

	ds	7850h-7843h	;Can't do "ds 7850h-$", the compiler complaints

DIRCALL::
	call	DO_DIRCALL
	call	DO_DIRCALL
	call	DO_DIRCALL
	call	DO_DIRCALL
	call	DO_DIRCALL

DO_DIRCALL:
	pop	ix
	push	bc
	ld	bc,DV_D0##-DIRCALL-3
	add	ix,bc
	pop	bc
	jp	DO_CALBNK


;-----------------------------------------------------------------------------
;
; Entry for disk routine DSKIO. It is somewhat complex:
; if transfer involves page 1, then 1-sector transfers are done
; by using XFER and SECBUF.
;

DIO_ENTRY::
	push	af
	call	IS_DVB
	jr	nc,DIO_ENTRY_DO

	ld	a,(iy+2)
	or	a
	jp	z,DISKERR

	call	HAS_PARTITION
	call	nz,ASSIGN_PARTITION
	jp	nz,POP_CONV_ERR

	ld	a,1
	ld	(KSLOT##),a	;KSLOT=1 -> device-based

	push	hl
	ld	l,(iy+4)
	ld	h,(iy+5)
	add	hl,de
	ld	ix,TMP_SEC##
	ld	(ix),l	;Calculate absolute sector number
	ld	(ix+1),h
	ld	l,(iy+6)
	ld	h,(iy+7)
	ld	de,0
	adc	hl,de
	ld	(ix+2),l
	ld	(ix+3),h
	pop	hl		;Restore transfer address
	ld	de,TMP_SEC##
	
	ld	c,(iy+3)	;Set LUN index
	pop	af		;From here Cy must be kept untouched
	ld	a,(iy+2)	;Set device index
	jr	DIO_ENTRY_DO_2

		
;From here, the processing is almost the same for device-based drivers
;and for drive-based drivers, since the relevant parameters are almost the same
;(B for the sector count, HL for the transfer address, A and C are not touched).
;The only thing to take in account, is that for drive-based, DE contains
;the sector number; and for device-based, DE is a pointer to a 32 bit sector number.
;We use KSLOT to handle this difference.

DIO_ENTRY_DO:
	xor	a
	ld	(KSLOT##),a	;KSLOT=0 -> drive-based
	pop	af
DIO_ENTRY_DO_2:

	; If the transfer starts and ends in page 0,
	; ir of it starts in page 2 or 3,
	; do all the transfer with a simple call to the driver

	push	af
	bit	7,h
	jp	nz,DIO_NOP1	;Transfer starts in page 2 or 3?
	push	hl
	push	bc
	sla	b
	ld	c,0	;Now BC = number of bytes to read
	add	hl,bc
	dec	hl	;Now HL = last read or written address
	ld	a,h
	and	11000000b	;Last accessed address in page 0?
	pop	bc
	pop	hl
	jp	z,DIO_NOP1
	pop	af

	jp	c,DIO_WR_LOOP

	; Loop for reading to page 1

DIO_RD_LOOP:
	push	af
	bit	7,h
	jp	nz,DIO_NOP1	;If not in page 0/1 anymore,
	push	bc		;do the remaining transfer
	push	de		;with a simple call to the driver
	push	hl
	
	ld	hl,($SECBUF##)
	ld	b,1
	or	a
	
	ld	ix,DV_DSKIO##	;Or DEV_RW (they are at the same address)
	ex	af,af'
	ld	a,DV_BANK##
	call	CALBNK##
	jr	nc,DIO_RD_OK

	pop	hl	;On disk error, just return
	pop	de
	pop	bc
	pop	bc	;Not POP AF, to preserve error info
	jp	CONV_ERR
DIO_RD_OK:
	
	ld	hl,($SECBUF##)
	pop	de	;Was PUSH HL
	push	de
	ld	bc,512
	call	XFER##

	pop	hl
	pop	de
	pop	bc
	inc	h
	inc	h	;Increase destination address by 512
	call	DIO_INC_DE
	pop	af
	djnz	DIO_RD_LOOP

	xor	a
	ret

	; Loop for writing from page 1

DIO_WR_LOOP:
	push	af
	bit	7,h
	jr	nz,DIO_NOP1	;If not in page 0/1 anymore,
	push	hl		;do the remaining transfer
	push	bc		;with a simple call to the driver
	push	de

	ld	de,($SECBUF##)
	ld	bc,512
	call	XFER##	;Preserves AF

	pop	de
	pop	bc
	push	bc
	push	de

	ld	hl,($SECBUF##)
	ld	b,1
	scf
	
	ld	ix,DV_DSKIO##
	ex	af,af'
	ld	a,DV_BANK##
	call	CALBNK##
	jr	nc,DIO_WR_OK

	pop	de	;On disk error, just return
	pop	bc
	pop	hl
	pop	hl	;Not POP AF, to preserve error info
	ret

DIO_WR_OK:
	pop	de
	pop	bc
	pop	hl
	inc	h
	inc	h	;Increase destination address by 512
	call	DIO_INC_DE
	pop	af
	djnz	DIO_WR_LOOP

	xor	a
	ret	


; Jump here when the transfer can be done in a single step
; (no page 1 involved)

DIO_NOP1:
	pop	af
	ld	ix,DV_DSKIO##
	call	DO_CALBNK
	jp	CONV_ERR


;This subroutine increases the sector number by one.
;Corrupts AF, IX.

DIO_INC_DE:
	ld	a,(KSLOT##)
	or	a
	jr	nz,DIO_INC_DE_DVB

	;Drive-based: simply increment DE.
	;Note that C can't hold sector number,
	;since this will be called in DOS 1 mode only,
	;and DOS 1 does not support FAT16,
	;so sector numbers are always 16 bit.

	inc	de
	ret

	;Device-based: increment the 32 bit number pointed by DE

DIO_INC_DE_DVB:
	push	hl
	push	de
	pop	ix
	ld	l,(ix)
	ld	h,(ix+1)
	inc	hl
	ld	(ix),l
	ld	(ix+1),h
	ld	a,h
	or	l	
	jr	nz,DIO_INC_DE_DVB_END
	ld	l,(ix+2)
	ld	h,(ix+3)
	inc	hl
	ld	(ix+2),l
	ld	(ix+3),h
DIO_INC_DE_DVB_END:
	pop	hl
	ret


;-----------------------------------------------------------------------------
;
	; General disk routines entry

	;--- Check disk change status

CHG_ENTRY::
	call	IS_DVB
	ld	ix,DV_CHGDSK##
	jp	nc,DO_CALBNK

	ld	a,(iy+2)
	or	a
	jp	z,DISKERR

	;Drive-based mapping:
	;Return "changed" if partition has changed, "unchanged" otherwise

	ld	a,(iy+1)
	ld	c,a
	res	7,(iy+1)
	and	10000000b	;Check partition changed flag
	ld	b,-1
	ld	a,c
	jr	nz,DO_MKDPB	;"Changed" if partition has changed
	xor	a
	ld	b,1	;"Unchanged" if partition has not changed
	ret

	if 0

	ld	b,(iy+3)
	ld	ix,DEV_STATUS##
	push	hl
	push	iy
	call	DO_CALBNK
	pop	iy
	pop	hl
	or	a
	jr	nz,CHG_ENTRY_2
	ld	a,12
	scf
	ret

CHG_ENTRY_2:
	ld	b,1	;Not changed
	dec	a
	ret	z
	ld	b,-1	;Changed
	dec	a
	jr	z,DO_MKDPB
	ld	b,0	;Unknown
	xor	a
	ret

	endif
	
	;--- Obtain DPB, input: IY=Entry in DVB_TABLE, HL=Address for DPB

DPB_ENTRY::
	call	IS_DVB
	ld	ix,DV_GETDPB##
	jp	nc,DO_CALBNK

DO_MKDPB:
	call	HAS_PARTITION
	call	nz,ASSIGN_PARTITION
	jp	nz,CONV_ERR

	push	hl
	ld	a,(iy+4)
	ld	(TMP_SEC##),a
	ld	a,(iy+5)
	ld	(TMP_SEC##+1),a
	ld	a,(iy+6)
	ld	(TMP_SEC##+2),a
	ld	a,(iy+7)
	ld	(TMP_SEC##+3),a
	ld	a,(iy+2)
	ld	b,1
	ld	c,(iy+3)
	ld	de,TMP_SEC##
	ld	hl,($SECBUF##)
	or	a
	ld	ix,DEV_RW##
	call	DO_CALBNK
	pop	de
	inc	de
	or	a
	jp	nz,CONV_ERR

	ld	hl,($SECBUF##)
	ld	bc,MKDPB##
	ld	(BK4_ADD##),bc
	call	?C4PBK##

	xor	a
	ret
	
	;--- Format choice

CHO_ENTRY::
	call	IS_DVB
	ld	ix,DV_CHOICE##
	jp	nc,DO_CALBNK
	
	ld	hl,741fh	;Formatting is no supported yet for device-based drivers
	ret

	;--- Format device

FMT_ENTRY::
	call	IS_DVB
	ld	ix,DV_CHOICE##
	jp	nc,DO_CALBNK
	
	ld	a,16		;Formatting is no supported yet for device-based drivers
	scf
	ret

	;--- Motor off

MOF_ENTRY::
	call	IS_DVB
	ld	ix,DV_MTOFF##
	jp	nc,DO_CALBNK

	ret

DO_CALBNK:
	ex	af,af'
	ld	a,DV_BANK##
	jp	CALBNK##


	;--- Jump here when an operation is requested
	;    on an existing, but empty, entry in DVB_TABLE

DISKERR:
	ld	a,12
	scf
	ret


;-----------------------------------------------------------------------------
;
; Check if the relative drive pointer by A refers to a device-based driver
; and we are in DOS 1 mode. If so, returns Cy=1 and IY=pointer to the
; table entry in DVB_TABLE. Otherwise returns Cy=0.
; Corrupts IY, F.

IS_DVB:
	push	af
	ld	a,(DOS_VER##)
	or	a
	jr	nz,IS_NOT_DVB

	ld	iy,(DVB_TABLE##)
	ld_a_iyh
	or_iyl
	jr	z,IS_NOT_DVB

	pop	af
	push	af
	push	bc
	ld	c,a	;C = Drive number
	ld	b,(iy)	;B = num of entries in DVB_TABLE
	inc	iy

IS_DVB_LOOP:
	push bc
	ld	a,(KSLOT##)
	ld b,(iy)
	res 6,b
	cp b
	pop bc	
	jr	nz,DIO_NEXT

	ld	a,(iy+1)
	and	01111111b	;Ignore partition changed flag
	cp	c
	jr	nz,DIO_NEXT

	;ld	a,c
	;cp	(iy+1)
	;jr	nz,DIO_NEXT

DIO_OK:
	pop	bc	;Found, return Cy=1
	pop	af
	scf
	ret

DIO_NEXT:
	push	bc
	ld	bc,8
	add	iy,bc
	pop	bc
	djnz	IS_DVB_LOOP
	pop	bc

IS_NOT_DVB:
	pop	af
	scf
	ccf
	ret


;-----------------------------------------------------------------------------
;
; Check if the entry of DVB_TABLE pointed by IY has a partition assigned.
; Return A=0, Z if partition assigned; A<>0, NZ if NO partition assigned.

HAS_PARTITION:
	ld	a,(iy+4)	;No partition assigned
	and	(iy+5)		;if sector number is -1
	and	(iy+6)
	and	(iy+7)
	inc	a
	jr	z,RET_NZ
	xor	a
	ret
RET_NZ:
	inc	a
	ret


;-----------------------------------------------------------------------------
;
; Assign the first available FAT12 primary partition to
; the device whose entry of DVB_TABLE pointed by IY.
; Returns disk error code in A, with Z appropriately set.
; Corrupts: AF, IX.

MBR_PSTART	equ	01BEh	;Start of partition table in MBR
MBR_PSIZE	equ	16	;Size of partition table entry
POFF_TYPE	equ	4	;Offset of partition type in p. table entry
POFF_PSTART	equ	8	;Offset of partition start in p. table entry
POFF_PSIZE	equ	12	;Offset of partition size in p. table entry
PT_FAT12	equ	1	;Partition type code for FAT12

ASSIGN_PARTITION:
	push bc
	push de
	push hl
	push iy

	pop hl
	push hl

	ld b,(iy+UD1_DI##)
	ld c,(iy+UD1_LI##)
	ld	a,4
	ld	ix,AUTO_ASPART##
	call	CALBNK##
	
	pop iy
	pop hl
	pop de
	pop bc

	or a
	ret z
	ld a,12
	ret


;-----------------------------------------------------------------------------
;
; Read the MBR of the device whose entry in DVB_TABLE
; is pointed by IY. Returns the disk error in A.
; Corrupts AF, BC, DE, HL, IX, IY.

READ_BOOT:
	ld	de,0
	ld	(TMP_SEC##),de
	ld	(TMP_SEC##+2),de
	ld	a,(iy+2)
	ld	b,1
	ld	c,(iy+3)
	ld	de,TMP_SEC##
	ld	hl,($SECBUF##)
	or	a
	ld	ix,DEV_RW##
	jp	DO_CALBNK


;-----------------------------------------------------------------------------
;
; Convert the disk error returned by a device-based routine,
; into its drive-based equivalent

POP_CONV_ERR:
	inc	sp
	inc	sp

CONV_ERR:
	or	a
	ret	z

	push	bc
	ld	b,0
	cp	.WPROT##
	jr	z,CONV_ERR_END
	ld	b,2
	cp	.NRDY##
	jr	z,CONV_ERR_END
	ld	b,4
	cp	.DATA##
	jr	z,CONV_ERR_END
	ld	b,6
	cp	.SEEK##
	jr	z,CONV_ERR_END
	ld	b,8
	cp	.RNF##
	jr	z,CONV_ERR_END
	ld	b,10
	cp	.WRERR##
	jr	z,CONV_ERR_END
	ld	b,12

CONV_ERR_END:
	ld	a,b
	pop	bc
	scf
	ret


;-----------------------------------------------------------------------------
;
; Default DPB, it contains data for a 720K disk drive

DEFDPB:
	DB	0FFh

	DB	0F9h
	DW	512		
	DB	15		
	DB	4		
	DB	1		
	DB	2		
	DW	1		
	DB	2		
	DB	112		
	DW	14		
	DW	714		
	DB	3		
	DW	7
;
	finish	<DRV>
;
	end
;
